<?php

namespace App\Service;

use App\Entity\Location;
use TelegramBot\Api\Types\ReplyKeyboardMarkup;

class ButtonService
{
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
    public const BUTTON_CHARACTER = 'üë§ Character';
    public const BUTTON_USER = 'üë§ User';
    public const BUTTON_INVENTORY = 'üéí Inventory';
    public const BUTTON_SHOP = 'üè™ Shop';
    public const BUTTON_MARKET = 'üè™ Market';
    public const BUTTON_HOUSE = 'üè† House';
    public const BUTTON_GUILD_HALL = 'üè† Guild Hall';
    public const BUTTON_MAP = 'üó∫Ô∏è Map';
    public const BUTTON_DUNGEON = '‚öîÔ∏è Dungeon';
    public const BUTTON_FIGHT = '‚öîÔ∏è Fight';
    public const BUTTON_EXIT_DUNGEON = 'üö™ Exit from dungeon';
    public const BUTTON_TAVERN = 'üè† Tavern';
    public const BUTTON_EXPLORE = 'üó∫Ô∏è Explore';
    public const BUTTON_HELP = 'üìö Help';
    public const BUTTON_BACK = 'üîô Back';
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
     */
    public function getKeyboardForLocation(Location $location): ReplyKeyboardMarkup
    {
        $locationType = $location->getType();
        
        switch ($locationType) {
            case 'city':
                return $this->getCityKeyboard();
            case 'dungeon':
                return $this->getDungeonKeyboard();
            case 'world':
                return $this->getWorldKeyboard();
            default:
                return $this->getDefaultKeyboard();
        }
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π
     */
    private function getCityKeyboard(): ReplyKeyboardMarkup
    {
        return new ReplyKeyboardMarkup([
            [self::BUTTON_CHARACTER, self::BUTTON_USER, self::BUTTON_INVENTORY],
            [self::BUTTON_SHOP, self::BUTTON_MARKET],
            [self::BUTTON_HOUSE, self::BUTTON_GUILD_HALL],
            [self::BUTTON_MAP, self::BUTTON_DUNGEON]
        ], true, true, true);
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∑–µ–º–µ–ª–∏–π
     */
    private function getDungeonKeyboard(): ReplyKeyboardMarkup
    {
        return new ReplyKeyboardMarkup([
            [self::BUTTON_CHARACTER, self::BUTTON_USER, self::BUTTON_INVENTORY],
            [self::BUTTON_FIGHT, self::BUTTON_EXIT_DUNGEON]
        ], true, true, true);
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∏—Ä–æ–≤–æ–π –∫–∞—Ä—Ç—ã
     */
    private function getWorldKeyboard(): ReplyKeyboardMarkup
    {
        return new ReplyKeyboardMarkup([
            [self::BUTTON_CHARACTER, self::BUTTON_USER, self::BUTTON_INVENTORY],
            [self::BUTTON_FIGHT, self::BUTTON_MAP]
        ], true, true, true);
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private function getDefaultKeyboard(): ReplyKeyboardMarkup
    {
        return new ReplyKeyboardMarkup([
            [self::BUTTON_CHARACTER, self::BUTTON_USER, self::BUTTON_INVENTORY],
            [self::BUTTON_EXPLORE, self::BUTTON_FIGHT],
            [self::BUTTON_SHOP, self::BUTTON_HELP]
        ], true, true, true);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
     */
    public function isButtonAvailableInLocation(string $buttonText, Location $location): bool
    {
        $availableButtons = $this->getAvailableButtonsForLocation($location);
        return in_array($buttonText, $availableButtons);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
     */
    public function getAvailableButtonsForLocation(Location $location): array
    {
        $locationType = $location->getType();
        
        // –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
        $buttons = [
            self::BUTTON_CHARACTER,
            self::BUTTON_USER,
            self::BUTTON_INVENTORY
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–æ–∫–∞—Ü–∏–∏
        switch ($locationType) {
            case 'city':
                $buttons = array_merge($buttons, [
                    self::BUTTON_SHOP,
                    self::BUTTON_MARKET,
                    self::BUTTON_HOUSE,
                    self::BUTTON_GUILD_HALL,
                    self::BUTTON_MAP,
                    self::BUTTON_DUNGEON
                ]);
                break;
                
            case 'dungeon':
                $buttons = array_merge($buttons, [
                    self::BUTTON_FIGHT,
                    self::BUTTON_EXIT_DUNGEON
                ]);
                break;
                
            case 'world':
                $buttons = array_merge($buttons, [
                    self::BUTTON_FIGHT,
                    self::BUTTON_MAP
                ]);
                break;
                
            default:
                $buttons = array_merge($buttons, [
                    self::BUTTON_EXPLORE,
                    self::BUTTON_FIGHT,
                    self::BUTTON_SHOP,
                    self::BUTTON_HELP
                ]);
        }
        
        return $buttons;
    }
}
